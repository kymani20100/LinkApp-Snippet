import React, { useState, useRef } from "react";
import {
  View,
  Text,
  TextInput,
  SafeAreaView,
  TouchableOpacity,
  SectionList,
  StyleSheet,
  Linking,
} from "react-native";
import { FloatingAction } from "react-native-floating-action";
import Modal from "react-native-modal";
import QRCode from "react-native-qrcode-svg";

const DATA = [
    { id: "1", name: "Alice", phone: "111-111-1111" },
    { id: "2", name: "Bob", phone: "222-222-2222" },
    { id: "3", name: "Charlie", phone: "333-333-3333" },
    { id: "4", name: "David", phone: "444-444-4444" },
    { id: "5", name: "Eva", phone: "555-555-5555" },
    { id: "6", name: "Frank", phone: "666-666-6666" },
    { id: "7", name: "George", phone: "777-777-7777" },
    { id: "8", name: "Harry", phone: "888-888-8888" },
    { id: "9", name: "Isabelle", phone: "999-999-9999" },
    { id: "10", name: "Jack", phone: "111-222-3333" },
    { id: "11", name: "Karen", phone: "444-555-6666" },
    { id: "12", name: "Liam", phone: "777-888-9999" },
    { id: "13", name: "Mike", phone: "111-444-7777" },
    { id: "14", name: "Nancy", phone: "222-555-8888" },
    { id: "15", name: "Oliver", phone: "333-666-9999" },
    { id: "16", name: "Paul", phone: "111-555-9999" },
    { id: "17", name: "Queenie", phone: "222-666-1111" },
    { id: "18", name: "Robert", phone: "333-777-2222" },
    { id: "19", name: "Sam", phone: "444-888-3333" },
    { id: "20", name: "Tina", phone: "555-999-4444" },
    { id: "21", name: "Uma", phone: "666-111-5555" },
    { id: "22", name: "Vera", phone: "777-222-6666" },
    { id: "23", name: "William", phone: "888-333-7777" },
    { id: "24", name: "Xavier", phone: "999-444-8888" },
    { id: "25", name: "Yara", phone: "111-666-1111" },
    { id: "26", name: "Zoe", phone: "222-777-2222" },
];

const styles = StyleSheet.create({
  //...existing styles
  modal: {
    backgroundColor: "#fff",
    borderRadius: 4,
    padding: 16,
    alignItems: "center",
  },
  modalText: {
    fontSize: 18,
    marginVertical: 16,
  },
  qrCode: {
    marginVertical: 16,
  },
});

const ModalQR = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedAlphabet, setSelectedAlphabet] = useState(null);
  const sectionListRef = useRef(null);
  const [selectedContact, setSelectedContact] = useState(null);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const actions = [
    {
        text: "Add",
        icon: require("../assets/scan.png"),
        name: "Add",
        position: 1,
      },
    {
      text: "Share",
      icon: require("../assets/share.png"),
      name: "Share",
      position: 3,
    },
  ];

  const handleSearchTermChange = (value) => {
    setSearchTerm(value);
    setSelectedAlphabet(null);
    sectionListRef.current.scrollToLocation({
      sectionIndex: 0,
      itemIndex: 0,
      viewOffset: 0,
    });
  };

  const handlePhoneIconPress = (phone) => {
    Linking.openURL(`tel:${phone}`);
  };

  const handleAlphabetClick = (index) => {
    setSelectedAlphabet(index);
    const matchingItemIndex = DATA.findIndex((item) =>
      item.name.toUpperCase().startsWith(String.fromCharCode(65 + index))
    );
    if (matchingItemIndex === -1) {
      return;
    }
    const sectionIndex = sections.findIndex(
      (section) => section.data[0].id === DATA[matchingItemIndex].id
    );
    if (sectionIndex !== -1) {
      sectionListRef.current.scrollToLocation({
        sectionIndex,
        itemIndex: 0,
        viewOffset: 24,
      });
    }
  };

  const handleContactPress = (contact) => {
    setSelectedContact(contact);
    setIsModalVisible(true);
  };

  const handleModalClose = () => {
    setIsModalVisible(false);
    setSelectedContact(null);
  };

  const handleSharePress = () => {
    // You can implement the share functionality here
    // using the selectedContact data and QR code
    // generated by the QRCode component.
    setIsModalVisible(false);
    setSelectedContact(null);
  };

  const filteredData = DATA.filter((item) =>
    item.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const sections = DATA.reduce((acc, item) => {
    const index = acc.findIndex(
      (section) => section.title === item.name[0].toUpperCase()
    );
    if (index === -1) {
      return [...acc, { title: item.name[0].toUpperCase(), data: [item] }];
    } else {
      acc[index].data.push(item);
      return acc;
    }
  }, []);

  const renderSectionHeader = ({ section }) => (
    <View style={styles.sectionHeader}>
      <Text style={styles.sectionHeaderText}>{section.title}</Text>
    </View>
  );

  const renderAlphabetList = () => (
    <View style={styles.alphabetList}>
      {sections.map((section, index) => (
        <TouchableOpacity
          key={section.title}
          onPress={() => handleAlphabetClick(index)}
        >
          <Text
            style={
              selectedAlphabet === index
                ? styles.selectedAlphabet
                : styles.alphabet
            }
          >
            {section.title}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );

  const renderContactItem = ({ item }) => (
    <TouchableOpacity style={styles.item}>
      <Text style={styles.itemText}>{item.name}</Text>
      <Text
        style={styles.itemText}
        onPress={() => handlePhoneIconPress(item.phone)}
      >
        {item.phone}
      </Text>
    </TouchableOpacity>
  );

  const handleFloatingActionPress = (name) => {
    if (name === "Add") {
      // Handle Add action
    } else if (name === "Send") {
      // Handle Send action
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search"
          onChangeText={handleSearchTermChange}
          value={searchTerm}
        />
      </View>
      <SectionList
        sections={sections}
        renderItem={renderContactItem}
        renderSectionHeader={renderSectionHeader}
        keyExtractor={(item) => item.id}
        ref={sectionListRef}
      />
      {renderAlphabetList()}
      <FloatingAction
        actions={actions}
        onPressItem={handleFloatingActionPress}
      />
    </SafeAreaView>
  );
};

export default ModalQR;
